// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/gettokens": {
            "post": {
                "description": "Генерирует новую пару access и refresh токенов для пользователя по GUID",
                "tags": [
                    "auth"
                ],
                "summary": "Получить пару токенов",
                "parameters": [
                    {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "GUID пользователя",
                        "name": "guid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetTokensResponseSwagger"
                        }
                    },
                    "400": {
                        "description": "GUID parameter is required",
                        "schema": {
                            "$ref": "#/definitions/handlers.BadRequestErrorSwagger"
                        }
                    },
                    "500": {
                        "description": "failed to generate tokens",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Деавторизует пользователя и инвалидирует все токены сессии",
                "tags": [
                    "auth"
                ],
                "summary": "Деавторизация пользователя",
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/handlers.UnauthorizedErrorSwagger"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.InternalErrorSwagger"
                        }
                    }
                }
            }
        },
        "/refresh": {
            "post": {
                "description": "Обновляет access и refresh токены по действующей паре",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Обновить пару токенов",
                "parameters": [
                    {
                        "description": "Пара токенов",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshResponseSwagger"
                        }
                    },
                    "400": {
                        "description": "Both access_token and refresh_token are required",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Invalid tokens or unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.UnauthorizedErrorSwagger"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Возвращает GUID пользователя по access токену (защищённый роут)",
                "tags": [
                    "user"
                ],
                "summary": "Получить GUID текущего пользователя",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/handlers.UnauthorizedErrorSwagger"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.InternalErrorSwagger"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.BadRequestErrorSwagger": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "GUID parameter is required"
                },
                "status": {
                    "type": "string",
                    "example": "Error"
                }
            }
        },
        "handlers.ErrorResponseSwagger": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "something went wrong"
                },
                "status": {
                    "type": "string",
                    "example": "Error"
                }
            }
        },
        "handlers.GetTokensResponseSwagger": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.GetTokensResponse"
                },
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "handlers.InternalErrorSwagger": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal server error"
                },
                "status": {
                    "type": "string",
                    "example": "Error"
                }
            }
        },
        "handlers.RefreshResponseSwagger": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.GetTokensResponse"
                },
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "handlers.UnauthorizedErrorSwagger": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid tokens or unauthorized"
                },
                "status": {
                    "type": "string",
                    "example": "Error"
                }
            }
        },
        "handlers.UserResponseSwagger": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.UserResponse"
                },
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "models.GetTokensResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.RefreshRequest": {
            "type": "object",
            "required": [
                "access_token",
                "refresh_token"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "guid": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Auth Service API",
	Description:      "JWT authentication service API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
